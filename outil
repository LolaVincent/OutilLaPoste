#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
import os
import csv
from PIL import Image # Faire sudo pip install pillow pour utiliser cette librairie
from fpdf import FPDF # Faire sudo pip install fpdf pour utiliser cette librairie
from collections import Counter
import matplotlib.pyplot as plt # pour les graphes, faire sudo apt-get install python-matplotlib avant
import numpy as np
from datetime import datetime
from math import *

# Problème d'encodage
import sys
reload(sys)
sys.setdefaultencoding('utf8')

""" fonction de lecture du CSV """
def readCSV() :
	nomFichier=raw_input("Veuillez entrer le nom du fichier  que vous voulez analysez (suivi de l'extension ) :")


	with open(nomFichier, 'rb') as csvfile:
		bdd = csv.reader(csvfile, delimiter=';')

		motif=[]

		dates = {}
		dates['compiegne'] = []
		dates['noyon'] = []
		dates['cuise'] = []
		dates['thourotte'] = []
		dates['venette'] = []
		dates['ressons'] = []
		dates['estrees'] = []

		sites = {}
		sites['compiegne'] = []
		sites['noyon'] = []
		sites['cuise'] = []
		sites['thourotte'] = []
		sites['venette'] = []
		sites['ressons'] = []
		sites['estrees'] = []
		liste_sites = ['compiegne', 'noyon', 'cuise', 'thourotte', 'venette', 'ressons', 'estrees']

		date_min_max = parcoursBDD(bdd, dates, sites, motif)
		csvfile.seek(0)
		semaines = calculNbSemaine(bdd, dates, date_min_max['date_min'], date_min_max['date_max'])
		showMotifGraph(motif)
		showSiteGraph(sites)
		showWeekSiteGraph(semaines['semaines'], semaines['nombre de semaines'], liste_sites)


""" Parcours du fichier BDD et récupération des infos """
def parcoursBDD(bdd, dates, sites, motif):

	date_max = datetime.strptime("01/01/1900 01:01", '%d/%m/%Y %H:%M')
	date_min = datetime.strptime("12/12/2020 00:00", '%d/%m/%Y %H:%M')
	i = 0
	for row in bdd:
		if '' != row[13]: # enlever le motif vide
			i = i+1
			motif.append(row[13])

		if row[49] != 'Date de la demande':
			date = datetime.strptime(row[49], '%d/%m/%Y %H:%M')
			if date_max < date :
				date_max = date
			if date_min > date:
				date_min = date
			# Séparation des reclamations par site et ajout de la date
			for site in sites:
				if str(site) in row[46].lower():
					if '' != row[13]:
						sites[site].append(row[13])
						dates[site].append([row[13], date, site])
	return {'date_min':date_min, 'date_max':date_max}


""" Détermination de la semaine du motif et par site """
def calculNbSemaine(bdd, dates, date_min, date_max):
	diff = date_max - date_min
	nb_jours = diff.days
	nb_semaines = int(ceil(nb_jours/7.0)) # arrondi supérieur

	semaines = []
	for i in range(1, nb_semaines+2):
		lieux = {}
		for site in dates:
			lieux[site+str(i-1)] = [] #besoin de différencier le site pour chaque semaine sinon agit sur tous car même clé
		semaines.append(lieux)

	for rows in dates :
		for row in dates[rows]:
			diff_date = row[1] - date_min
			semaine = int(ceil(diff_date.days/7.0))
			semaines[semaine][rows+str(semaine)].append(row[0])
	return {'semaines': semaines, 'nombre de semaines': nb_semaines}


""" Initialisation d'un tableau de semaines avec dans chaque semaine les tableaux de chaque site,
	parcours de dates, determination de la semaine ( diff entre date min puis division par 7 pour avoir la semaine et insertion dans le tableau """



""" Calcul du nombre de réclamations par motif et affichage sur un même graphe """
def showMotifGraph (motif):


	# Calcul du nombre de reclamation par motifs
	nb_recla_motifs = Counter(motif[1:len(motif)])
	name = nb_recla_motifs.keys()

	data = nb_recla_motifs.values()
	# Construction du camembert

	explode= np.zeros(len(nb_recla_motifs))
	plt.pie(data, explode=explode, labels=name, autopct = lambda x: str(round(x, 1)) + '%', shadow=False)
	plt.axis('equal')
	plt.title('nb_recla_motifs')
	plt.savefig('Graphiques/' + 'nb_recla_motifs.png', fontsize='20')
	plt.show()
	plt.close()

""" Calcul du nombre de réclamations par site et affichage des graphes pour chaque site dans un png
"""

def showSiteGraph(sites) :
	for site in sites:
		count_sites = Counter(sites[site])
		name = count_sites.keys()
		data = count_sites.values()

		# Construction du camembert

		explode = np.zeros(len(count_sites))
		plt.pie(data, explode=explode, labels=name, autopct = lambda x: str(round(x, 1)) + '%', 		shadow=False)
 		plt.axis('equal')
		plt.title('Nombre de réclamations par motifs pour '+site)
		plt.savefig('Graphiques/'+site+'.png')
		plt.show()
		plt.close()

def showWeekSiteGraph(semaines, nb_semaines, liste_sites):
	num_semaine = raw_input('Pour quelle semaine souhaitez-vous voir les indicateurs ?')
	while int(num_semaine) > nb_semaines:
		print("Cette semaine n'est pas traitée dans le fichier")
		num_semaine = raw_input('Pour quelle semaine souhaitez-vous voir les indicateurs ?')

	for site in liste_sites :
		if semaines[int(num_semaine)][site+num_semaine]:
			count = Counter(semaines[int(num_semaine)][site+num_semaine])
			name = count.keys()
			data = count.values()

			# Construction du camembert

			explode = np.zeros(len(data))
			plt.pie(data, explode=explode, labels=name, autopct = lambda x: str(round(x, 1)) + '%', 		shadow=False)
	 		plt.axis('equal')
			plt.title('Nombre de réclamations par motifs pour '+site+' par semaine ')
			plt.savefig('Graphiques/'+site+'-semaine.png')
			plt.show()
			plt.close()



""" Fonction pour mettre tous les fichiers d'un répertoire donné dans une liste """
def listeImagesDossier(nomDossier) :
	listeImages=list()
	listeImages.append("0pageDeGarde.png")
	for element in os.listdir(nomDossier):
		if(element!="0pageDeGarde.png"):
			listeImages.append(element)
	return listeImages

"Fonction permettant d'afficher toutes les images dans un pdf"
def fromPNGToPDF(pdfFileName, listImages, dir = ''):

    if (dir):
        dir += "/"

    cover = Image.open(dir + "0pageDeGarde.png" )
    width, height = cover.size


    pdf = FPDF(unit = "pt", format = [width, height])


    for page in listImages:
        pdf.add_page()
        pdf.image(dir + str(page) , 0, 0)

    pdf.output( pdfFileName + ".pdf", "F")


""" FONCTION PRINCIPALE DE NOTRE PROGRAMME """
reponse =readCSV()
question = raw_input("Voulez vous inclure tous les PNG dans un seul dossier PDF ?")
if (question== "oui" or question =="OUI" or question =="O" or question=="o" or question=="oui"):
	fromPNGToPDF("Résumé",listeImagesDossier("Graphiques/"),"Graphiques/")
	print("PDF créé !")
else :
	print ("Rien ne sera effectué.")
print("Fonction finie :) ")
